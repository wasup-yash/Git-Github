Command Line/Git- Bash : The computer program we use to input Git commands. On a Mac, it’s called Terminal. On a PC, 
              it’s a non-native program that you download when you download Git for the first time (we’ll do that in the next section). 
              In both cases, you type text-based commands, known as prompts, into the screen, instead of using a mouse.

Repository: A directory or storage space where your projects can live. 
            Sometimes GitHub users shorten this to “repo.” It can be local to a folder on your computer, or it can be a storage space on GitHub or another online host.
            You can keep code files, text files, image files, you name it, inside a repository.

Version Control: Basically, the purpose Git was designed to serve.
                 When you have a Microsoft Word file, you either overwrite every saved file with a new save, or you save multiple versions.
                 With Git, you don’t have to. It keeps “snapshots” of every point in time in the project’s history, so you can never lose or overwrite it.

Commit: This is the command that gives Git its power. 
        When you commit, you are taking a “snapshot” of your repository at that point in time, 
        giving you a checkpoint to which you can re-evaluate or restore your project to any previous state.

Branch: How do multiple people work on a project at the same time without Git getting them confused?
        Usually, they “branch off” of the main project with their own versions full of changes they themselves have made. 
        After they’re done, it’s time to “merge” that branch back with the “master,” the main directory of the project.
